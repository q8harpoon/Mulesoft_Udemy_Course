<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
	<flow name="3.dataweave_basics" doc:id="28b6d0ff-e4b7-496b-b436-739ec1165062" >
		<ee:transform doc:name="concatenate two string into a single string" doc:id="f4605d42-bcd8-43f6-be25-5def9ef349cb" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0


output application/json
---
{
	"newString": ("Hello" ++ "World")
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="tranform json to xml" doc:id="b36b5128-8e43-416b-97f4-4663bd014c6b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0


output application/xml
---
{
	"newString": ("Hello" ++ "World")
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Create a variable in dataweave" doc:id="8c9d529c-4145-4596-a5f1-1d7d8c0a2e33" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var myVar = {
		"newString": ("Hello" ++ "World")
}
output application/json
---
myVar]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="use dataweave native function" doc:id="c453fef4-3845-43b7-b563-87eb1b2ca7cd" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var myVar = {
	"sum": sum([3,2,1,6,5,4,9,8,7]),
	"avg": avg([3,2,1,6,5,4,9,8,7]),
	"even": isEven(4),
	"upper": upper("hello"),
	"timestamp": now(),
	
}
output application/JSON
---
myVar]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="3.dataweave_files" doc:id="f65bfeeb-4142-4e64-84ea-5d5e6ea0c2fc" >
		<ee:transform doc:name="read content file from classpath" doc:id="63789bdd-6a69-44e0-b0ae-8f8bbba17689" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
readUrl("classpath://peopleName.json")]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Create a metadata type and use it as a payload" doc:id="512e8c29-2c5f-4b68-9a20-a46b02f68545" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweave_Object_Array" doc:id="f8e8d57f-1468-4c4f-ad15-29c3a542a5cf" >
		<ee:transform doc:name="map elements from an array into object" doc:id="b2df677a-6ad7-4963-ac41-da9f3fb7a036" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customArray = [
	"Mulesoft",
	"Course",
	"fundamentals"
]


output application/json
---


customArray map ((item, index) ->
	(index) : item ++ "_" ++ index
)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="pluck object from an object into an array" doc:id="6c54ac79-fdf3-40dc-ac8f-6a2a763aa754" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"0" : "Mulesoft" ,
	"1" : "Course" ,
	"2" : "Fundamentals" ,
}
output application/json
---
customObj pluck ((value, key, index) ->
value)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="filter an array and return only the matching item" doc:id="6a373735-fdaa-47a8-842d-d386ceb82d29" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customArray = [1,2,3,4,5,6,7,8,9,10]
output application/json
---
customArray filter ((item, index) ->
	item > 4
)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="filter an object and return only the matching item" doc:id="c884a9ee-b8a3-47b3-b257-f0cffa594695" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"0" : "Mulesoft" ,
	"1" : "Course" ,
	"2" : "Fundamentals" ,
}

output application/json
---
{
	"collection" : customObj filterObject ((value, key, index) -> 
		sizeOf(value) > 6 and (key contains 0)
	)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="3.dataweave_Selectors_over_objects" doc:id="d6496384-44a4-4f67-af01-abeed9060278" >
		<ee:transform doc:name="Single-value selector over an object" doc:id="61542a3b-5c04-47fe-811b-692006590d94" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"people":{
		"person":{
			"name":"John"
		},
		"person":{
			"name":"Mary"
		},
		"person":{
			"name":"Tim"
		},
		"person":{
			"name":"Ann"
		},
		"person":{
			"name":"Dora"
		}
	}
}
output application/json
---
customObj.people.person]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="multiple-value selector over an object" doc:id="b1321c1f-21fc-41aa-9c31-dbcc93ab8437" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"people":{
		"person":{
			"name":"John"
		},
		"person":{
			"name":"Mary"
		},
		"person":{
			"name":"Tim"
		},
		"person":{
			"name":"Ann"
		},
		"person":{
			"name":"Dora"
		}
	}
}
output application/json
---
customObj.people.*person]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="descendant-value selector over an object" doc:id="3b6dc62b-e028-4dc3-9edb-0f2babd1edcc" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"people":{
		"person":{
			"name":"John",
			"address":{
				"name" : "address1"
			}
		},
		"person":{
			"name":"Mary",
			"address":{
				"name" : "address2"
			}
		},
		"person":{
			"name":"Tim",
			"address":{
				"name" : "address3"
			}
		},
		"person":{
			"name":"Ann",
			"address":{
				"name" : "address4"
			}
		},
		"person":{
			"name":"Dora",
			"address":{
				"name" : "address5"
			}
		}
	}
}
output application/json
---
customObj.people..name]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="key-value pair selector over an object" doc:id="bc9033c0-3638-43fd-ac49-68cf2955fea3" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"people":{
		"person":{
			"name":"John",
			"address":{
				"name" : "address1"
			}
		},
		"person":{
			"name":"Mary",
			"address":{
				"name" : "address2"
			}
		},
		"person":{
			"name":"Tim",
			"address":{
				"name" : "address3"
			}
		},
		"person":{
			"name":"Ann",
			"address":{
				"name" : "address4"
			}
		},
		"person":{
			"name":"Dora",
			"address":{
				"name" : "address5"
			}
		}
	}
}
output application/json
---
customObj.people.*person.&name]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="index selector over an object" doc:id="dee2dbcf-5d60-498f-9c10-ee4076ef5807" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"people":{
		"person":{
			"name":"John",
			"address":{
				"name" : "address1"
			}
		},
		"person":{
			"name":"Mary",
			"address":{
				"name" : "address2"
			}
		},
		"person":{
			"name":"Tim",
			"address":{
				"name" : "address3"
			}
		},
		"person":{
			"name":"Ann",
			"address":{
				"name" : "address4"
			}
		},
		"person":{
			"name":"Dora",
			"address":{
				"name" : "address5"
			}
		}
	}
}
output application/json
---
customObj.people[2]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="3.dataweave_Selectors_over_String" doc:id="ad97ac0f-1030-49e5-967a-b0eea5b91aef" >
		<ee:transform doc:name="index selector over a string" doc:id="b1784d2b-3bea-4eb5-9f26-2a16380eff30" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customString = "Mulesoft"

output application/json

---

customString[0]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="range selector over a string" doc:id="defb5320-b15d-496c-8998-247c65c921d1" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customString = "Mulesoft"

output application/json

---

customString[0 to 3]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="3.dataweave_lambdas_basics" doc:id="ebed063a-99aa-4099-bd97-5f36672a5abb" >
		<http:listener doc:name="HTTP POST" doc:id="ea02d513-53e9-4276-ba16-4d66a6a7c67b" path="/lambdas" allowedMethods="POST" config-ref="HTTP_Listener_config"/>
		<ee:transform doc:name="declare and incoke a function" doc:id="eb25e244-c5d1-4e94-bd10-b3258779eec8" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

fun createString(obj) = {
	description:obj.field1 ++" "++ obj.field2 ++" "++ obj.field3
}
output application/json
---
{
	"root":createString(payload)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="26942513-b805-464c-bb7b-80334f8c77c2" message="#[payload]"/>
		<ee:transform doc:name="use named parameters in lambda" doc:id="dbfcaf2f-c7b0-4d66-9758-5d6e1292355c" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
var customArray = [1,2,3,4,5,6]

output application/json
---
{
	"collection" : customArray map ((number) -> 
		(number*100)
	)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="476fb24d-a50d-4173-8e02-eb212997eab4" message="#[payload]"/>
		<ee:transform doc:name="use lambda defult argument value" doc:id="ad234a62-6766-4517-82bc-8df8b25f57a3" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customArray = ["Mulesoft","Course","fundamentals"]
output application/json
---


{
	"collection" : customArray map (
		"$$":$
	)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="3.dataweave_lambdas_intermediate" doc:id="3d0ea3ef-5fc8-4150-a609-1ed65948e70f" >
		<ee:transform doc:name="maps and merges fields from items in seperate arrays" doc:id="ce091124-b302-4a82-bd0f-23e0986b1de9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var books = [
	{
		bookid : 101,
		title: "mulesoft course",
		"price": "20.00"
	},
	{
		bookid : 201,
		title: "mulesoft fundementals",
		"price": "10.00"
	},
	{
		bookid : 301,
		title: "mulesoft essentials",
		"price": "15.00"
	}
]

var authers = [
	{
		bookid: 101,
		author:"nelson dias"
	},
	{
		bookid: 201,
		author:"Fahad Alhassan"
	},
	{
		bookid: 301,
		author:"Abdulrahman Faris"
	}
]

output application/json
---
{
	"bookResult" : books map ((item, index) ->
		using(id = item.bookid){
			"id" : id,
			"topic": item.title,
			"cost":item.price,
			(authers filter ($.*bookid contains id) map(item)-> 
				{
					"author" : item.author
				}
			)		
		}
	)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="return only the values of matching keys within an object" doc:id="69094140-1c13-43bd-986d-38f13285254d" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var booksList = [
	book:{
		bookid : 101,
		title: "mulesoft course",
		"price": "20.00"
	},
	book:{
		bookid : 201,
		title: "mulesoft fundementals",
		"price": "10.00"
	},
	book:{
		bookid : 301,
		title: "mulesoft essentials",
		"price": "15.00"
	}
]


output application/json
---
"prices": booksList.book.*price[?($>15)]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
